// src/screens/SessionDetailScreen.js
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context'; 

export default function SessionDetailScreen({ navigation, route }) {
  const { session } = route.params || {};

  // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÂÆâÂÖ®„Å´„Éû„Éº„Ç∏
  const mockSession = {
    id: session?.id || '1',
    sceneName: session?.sceneName || 'ÈÄ±Ê¨°Â†±Âëä‰ºöË≠∞',
    sceneIcon: session?.sceneIcon || 'üìä',
    date: session?.date || '2025Âπ¥10Êúà7Êó• 10:30',
    duration: session?.duration || '8ÂàÜ',
    questions: session?.questions || [
      {
        question: '‰ªäÈÄ±„ÅÆÈÄ≤ÊçóÁä∂Ê≥Å„Å®„ÄÅÁèæÂú®Áõ¥Èù¢„Åó„Å¶„ÅÑ„ÇãË™≤È°å„ÇíÂÖ∑‰ΩìÁöÑ„Å´Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
        answer: 'EC„Çµ„Ç§„Éà„ÅÆÊ±∫Ê∏àÊ©üËÉΩ„ÇíÂÆüË£Ö‰∏≠„Åß„Åô„ÄÇAPI„Ç®„É©„Éº„Åß3Êó•ÈÅÖÂª∂„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
      },
      {
        question: '„Åù„ÅÆË™≤È°å„Å´ÂØæ„Åó„Å¶„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂØæÁ≠ñ„ÇíËÄÉ„Åà„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
        answer: 'ÂØæÁ≠ñ„ÇíÊ§úË®é‰∏≠„Åß„Åô„ÄÇAPIÊèê‰æõÂÖÉ„Å´Âïè„ÅÑÂêà„Çè„Åõ„Çã‰∫àÂÆö„Åß„Åô„ÄÇ',
      },
      {
        question: '„ÉÅ„Éº„É†„É°„É≥„Éê„Éº„Å®„ÅÆÈÄ£Êê∫„ÅØ„ÅÜ„Åæ„Åè„ÅÑ„Å£„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
        answer: '„ÅØ„ÅÑ„ÄÅÊØéÊó•„Çπ„Çø„É≥„Éâ„Ç¢„ÉÉ„Éó„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅßÊÉÖÂ†±ÂÖ±Êúâ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
      },
    ],
    feedback: session?.feedback || {
      summary: 'ÂÖ®‰ΩìÁöÑ„Å´ÂÖ∑‰ΩìÁöÑ„Å™Ë™¨Êòé„Åå„Åß„Åç„Å¶„Åä„Çä„ÄÅËâØ„ÅÑÂ†±Âëä„Åß„Åó„Åü„ÄÇ',
      goodPoints: ['ÂÖ∑‰ΩìÊÄß', 'ÂïèÈ°åË™çË≠ò'],
      improvementPoints: ['Ë´ñÁêÜÊßãÈÄ†', 'Ëß£Ê±∫Á≠ñ„ÅÆÊèêÁ§∫'],
    },
  };

  const handleDelete = () => {
    Alert.alert(
      'ÂâäÈô§Á¢∫Ë™ç',
      '„Åì„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü',
      [
        { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
        { 
          text: 'ÂâäÈô§', 
          style: 'destructive',
          onPress: () => {
            // ÂâäÈô§Âá¶ÁêÜÔºàÂæå„ÅßÂÆüË£ÖÔºâ
            console.log('„Çª„ÉÉ„Ç∑„Éß„É≥ÂâäÈô§');
            navigation.goBack();
          }
        },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      <ScrollView showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <Text style={styles.sceneIcon}>{mockSession.sceneIcon}</Text>
          <Text style={styles.sceneName}>{mockSession.sceneName}</Text>
          <Text style={styles.date}>{mockSession.date}</Text>
          <Text style={styles.duration}>ÊâÄË¶ÅÊôÇÈñì: {mockSession.duration}</Text>
        </View>

        <View style={styles.content}>
          {/* Q&AÂ±•Ê≠¥ */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Ë≥™Âïè„Å®ÂõûÁ≠î</Text>
            {mockSession.questions.map((qa, index) => (
              <View key={index} style={styles.qaCard}>
                <View style={styles.questionContainer}>
                  <Text style={styles.qaLabel}>Q{index + 1}</Text>
                  <Text style={styles.questionText}>{qa.question}</Text>
                </View>
                <View style={styles.answerContainer}>
                  <Text style={styles.qaLabel}>A</Text>
                  <Text style={styles.answerText}>{qa.answer}</Text>
                </View>
              </View>
            ))}
          </View>

          {/* „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çµ„Éû„É™„Éº */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ</Text>
            <View style={styles.feedbackCard}>
              <Text style={styles.feedbackSummary}>{mockSession.feedback.summary}</Text>
              
              <View style={styles.feedbackPoints}>
                <Text style={styles.pointsLabel}>‚úÖ ËâØ„Åã„Å£„ÅüÁÇπ</Text>
                {mockSession.feedback.goodPoints.map((point, index) => (
                  <Text key={index} style={styles.pointItem}>‚Ä¢ {point}</Text>
                ))}
              </View>
              
              <View style={styles.feedbackPoints}>
                <Text style={styles.pointsLabel}>üí° ÊîπÂñÑÁÇπ</Text>
                {mockSession.feedback.improvementPoints.map((point, index) => (
                  <Text key={index} style={styles.pointItem}>‚Ä¢ {point}</Text>
                ))}
              </View>
            </View>
          </View>
        </View>

        <View style={styles.actions}>
          <TouchableOpacity 
            style={styles.deleteButton}
            onPress={handleDelete}
          >
            <Text style={styles.deleteButtonText}>ÂâäÈô§</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#2196F3',
    padding: 24,
    alignItems: 'center',
  },
  sceneIcon: {
    fontSize: 48,
    marginBottom: 8,
  },
  sceneName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 8,
  },
  date: {
    fontSize: 16,
    color: '#fff',
    opacity: 0.9,
    marginBottom: 4,
  },
  duration: {
    fontSize: 14,
    color: '#fff',
    opacity: 0.8,
  },
  content: {
    padding: 16,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  qaCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  questionContainer: {
    flexDirection: 'row',
    marginBottom: 12,
  },
  answerContainer: {
    flexDirection: 'row',
  },
  qaLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2196F3',
    marginRight: 12,
    width: 24,
  },
  questionText: {
    flex: 1,
    fontSize: 15,
    color: '#333',
    lineHeight: 22,
  },
  answerText: {
    flex: 1,
    fontSize: 15,
    color: '#666',
    lineHeight: 22,
  },
  feedbackCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
  },
  feedbackSummary: {
    fontSize: 15,
    color: '#333',
    lineHeight: 22,
    marginBottom: 16,
  },
  feedbackPoints: {
    marginBottom: 12,
  },
  pointsLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  pointItem: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    marginLeft: 8,
    marginBottom: 4,
  },
  actions: {
    padding: 16,
  },
  deleteButton: {
    backgroundColor: '#FF5252',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
  },
  deleteButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});